// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks_mysql

import context "context"
import entity "github.com/erwinhermanto31/quiz_master/entity"
import mock "github.com/stretchr/testify/mock"

import sqlx "github.com/jmoiron/sqlx"
import util "github.com/erwinhermanto31/quiz_master/util"

// IMysql is an autogenerated mock type for the IMysql type
type IMysql struct {
	mock.Mock
}

// CreateOrUpdate provides a mock function with given fields: ctx, db, data, query
func (_m *IMysql) CreateOrUpdate(ctx context.Context, db *sqlx.DB, data interface{}, query string) (int64, error) {
	ret := _m.Called(ctx, db, data, query)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, interface{}, string) int64); ok {
		r0 = rf(ctx, db, data, query)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.DB, interface{}, string) error); ok {
		r1 = rf(ctx, db, data, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *IMysql) Get(_a0 context.Context, _a1 *sqlx.DB, _a2 interface{}, _a3 *util.Query, _a4 string) error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, interface{}, *util.Query, string) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Select provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *IMysql) Select(_a0 context.Context, _a1 *sqlx.DB, _a2 *[]entity.Question, _a3 *util.Query, _a4 string) error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, *[]entity.Question, *util.Query, string) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
