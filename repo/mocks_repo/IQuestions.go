// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks_repo

import context "context"
import entity "github.com/erwinhermanto31/quiz_master/entity"
import mock "github.com/stretchr/testify/mock"

// IQuestions is an autogenerated mock type for the IQuestions type
type IQuestions struct {
	mock.Mock
}

// CreateQuestion provides a mock function with given fields: ctx, req
func (_m *IQuestions) CreateQuestion(ctx context.Context, req entity.Question) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Question) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteQuestion provides a mock function with given fields: ctx, req
func (_m *IQuestions) DeleteQuestion(ctx context.Context, req entity.Question) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Question) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllQuestion provides a mock function with given fields: ctx, req
func (_m *IQuestions) FindAllQuestion(ctx context.Context, req entity.Question) ([]entity.Question, error) {
	ret := _m.Called(ctx, req)

	var r0 []entity.Question
	if rf, ok := ret.Get(0).(func(context.Context, entity.Question) []entity.Question); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Question)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.Question) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindQuestion provides a mock function with given fields: ctx, req
func (_m *IQuestions) FindQuestion(ctx context.Context, req entity.Question) (entity.Question, error) {
	ret := _m.Called(ctx, req)

	var r0 entity.Question
	if rf, ok := ret.Get(0).(func(context.Context, entity.Question) entity.Question); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(entity.Question)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.Question) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQuestion provides a mock function with given fields: ctx, req
func (_m *IQuestions) UpdateQuestion(ctx context.Context, req entity.Question) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Question) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
